package lamport;


/**
* lamport/LamportPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from lamport.idl
* Saturday, January 11, 2020 3:52:09 PM WEST
*/

public abstract class LamportPOA extends org.omg.PortableServer.Servant
 implements lamport.LamportOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("sendReq", new java.lang.Integer (0));
    _methods.put ("sendAck", new java.lang.Integer (1));
    _methods.put ("sendRel", new java.lang.Integer (2));
    _methods.put ("acceptReq", new java.lang.Integer (3));
    _methods.put ("acceptAck", new java.lang.Integer (4));
    _methods.put ("acceptRel", new java.lang.Integer (5));
    _methods.put ("criticalSessionRequest", new java.lang.Integer (6));
    _methods.put ("criticalSessionRealise", new java.lang.Integer (7));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // lamport/Lamport/sendReq
       {
         int p = in.read_long ();
         int clock = in.read_long ();
         this.sendReq (p, clock);
         out = $rh.createReply();
         break;
       }

       case 1:  // lamport/Lamport/sendAck
       {
         int p = in.read_long ();
         int clock = in.read_long ();
         this.sendAck (p, clock);
         out = $rh.createReply();
         break;
       }

       case 2:  // lamport/Lamport/sendRel
       {
         int p = in.read_long ();
         int clock = in.read_long ();
         this.sendRel (p, clock);
         out = $rh.createReply();
         break;
       }

       case 3:  // lamport/Lamport/acceptReq
       {
         int p = in.read_long ();
         int clock = in.read_long ();
         this.acceptReq (p, clock);
         out = $rh.createReply();
         break;
       }

       case 4:  // lamport/Lamport/acceptAck
       {
         int p = in.read_long ();
         int clock = in.read_long ();
         this.acceptAck (p, clock);
         out = $rh.createReply();
         break;
       }

       case 5:  // lamport/Lamport/acceptRel
       {
         int p = in.read_long ();
         int clock = in.read_long ();
         this.acceptRel (p, clock);
         out = $rh.createReply();
         break;
       }

       case 6:  // lamport/Lamport/criticalSessionRequest
       {
         this.criticalSessionRequest ();
         out = $rh.createReply();
         break;
       }

       case 7:  // lamport/Lamport/criticalSessionRealise
       {
         this.criticalSessionRealise ();
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:lamport/Lamport:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public Lamport _this() 
  {
    return LamportHelper.narrow(
    super._this_object());
  }

  public Lamport _this(org.omg.CORBA.ORB orb) 
  {
    return LamportHelper.narrow(
    super._this_object(orb));
  }


} // class LamportPOA
